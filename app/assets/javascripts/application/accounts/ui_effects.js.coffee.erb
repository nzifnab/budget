class Effects
  @className: 'Effects'

  # Rule of thumb:  fat arrow when using
  # the function as a callback or sending the function
  # itself as a parameter
  @events: =>
    @initAccordion()

  @globalEvents: =>
    @initRemoteHide()
    @initRemoteShow()
    @initRemoteContentAppend()
    @initRemoteReplace()
    @initRemoteText()
    @initClickRemove()
    @initClickShow()
    @initClickHide()
    @initClickToggle()
    @initSelectToggling()
    @initClickModifyClasses()
    @initTabTogglers()
    @initPreventDefault()
    @initRemoteContentFill()
    @styleDisableWithLinks()

  @initPreventDefault: ->
    $(document).on 'click', ".js-prevent-default", (e) ->
      e.preventDefault()

  @initClickToggle: ->
    $(document).on 'click', "[data-click-toggle]", (e) ->
      e.preventDefault()
      $($(this).data("click-toggle")).toggle()

  @initClickRemove: ->
    $(document).on 'click', "[data-click-remove]", (e) ->
      e.preventDefault()
      $($(this).data('click-remove')).remove()

  @initClickShow: ->
    $(document).on 'click', "[data-click-show]", (e) ->
      e.preventDefault()
      $($(this).data('click-show')).show()

  @initClickHide: ->
    $(document).on 'click', "[data-click-hide]", (e) ->
      e.preventDefault()
      $($(this).data('click-hide')).hide()


  @initSelectToggling: ->
    $(document).on "change", "select[data-select-toggler]", (e) ->
      e.preventDefault()
      $option = $(this).find("option:selected")
      toggleValue = $(this).data('select-toggler')
      if toggleValue != true && toggleValue
        $element = $($(this).data('select-toggler'))
      if $option.data('hide')
        ($element ||= $($option.data('hide'))).hide()
      if $option.data('show')
        ($element ||= $($option.data('show'))).show()
      if $option.data('toggle')
        ($element ||= $($option.data('toggle'))).toggle()
      if $option.data('clear-fields')
        $element.find("input, textarea, select").val('')
      if $option.data('disable-fields')
        $element.find("input, textarea, select").prop('disabled', true)
      if $option.data('enable-fields')
        $element.find("input, textarea, select").prop("disabled", false)

  @initClickModifyClasses: ->
    $(document).on 'click', "[data-click-remove-element-class]", (e) ->
      e.preventDefault()
      $($(this).data('click-remove-element-class')).
        removeClass($(this).data("click-remove-class-value"))

    $(document).on 'click', "[data-click-add-element-class]", (e) ->
      e.preventDefault()
      $($(this).data('click-add-element-class')).
        addClass($(this).data('click-add-class-value'))

  @initRemoteHide: ->
    $(document).on 'ajax:complete', "[data-remote-hide]", ->
      $($(this).data('remote-hide')).hide()

  @initRemoteShow: ->
    $(document).on 'ajax:complete', "[data-remote-show]", ->
      $($(this).data('remote-show')).show()

  @initRemoteReplace: ->
    $(document).on(
      {
        'ajax:success': (e, data, status, xhr) ->
          Effects.remoteReplaceSlide($(this), data.html ? data, 'left')
        'ajax:error': (e, xhr, status, error) ->
          Effects.remoteReplaceSlide($(this), xhr.responseText, 'left')
      }, "[data-remote-replace-left]"
    )

    $(document).on(
      {
        'ajax:success': (e, data, status, xhr) ->
          Effects.remoteReplaceSlide($(this), data.html ? data, 'right')
        'ajax:error': (e, xhr, status, error) ->
          Effects.remoteReplaceSlide($(this), xhr.responseText, 'right')
      }, "[data-remote-replace-right]"
    )

  @initRemoteText: ->
    $(document).on 'ajax:complete', "[data-remote-text]", ->
      $($(this).data('remote-text')).text(
        $(this).data('remote-text-content')
      )


  @remoteReplaceSlide: ($element, data, direction) ->
    $el = $($element.data("remote-replace-#{direction}"))
    $container = $el.parent()
    $newContents = $(data)
    <% if Rails.env.test? %>
    $el.remove()
    $newContents.appendTo($container)
    <% else %>
    $slideContainer = $("<div></div>").addClass("slide-container").
      appendTo($container)

    distanceMult = 0.525;
    if direction == 'right'
      $slideContainer.css({
        "position": "relative",
        "left": "-110%"
      })
    $breaker = $("<div class='break'></div>")
    elementsOrdered = if direction == 'left'
      [$el, $newContents, $breaker]
    else
      [$newContents, $el, $breaker]

    $slideContainer.append(elementsOrdered...)
    $slideContainer.hide {
      effect: 'slide',
      direction: direction,
      distance: ($slideContainer.outerWidth() * distanceMult),
      complete: ->
        $el.remove()
        $container.append($newContents)
        $slideContainer.remove()
    }
    <% end %>

  @initRemoteContentAppend: ->
    $(document).on(
      {
        'ajax:success': (e, data, status, xhr) ->
          Effects.remoteContentAppend(this, data)
        'ajax:error': (e, xhr, status, error) ->
          Effects.remoteContentAppend(this, xhr.responseText)
      }, "[data-remote-content-append]"
    )

  @initRemoteContentFill: ->
    $(document).on(
      {
        "ajax:success": (e, data, status, xhr) ->
          Effects.remoteContentFill(this, data.html)
        "ajax:error": (e, xhr, status, error) ->
          Effects.remoteContentFill(this, xhr.responseText)
      }, "[data-remote-content-fill]"
    )

  @styleDisableWithLinks: ->
    $(document).on "ajax:beforeSend", "[data-disable-with]", ->
      $(this).addClass('disabled')

    $(document).on "ajax:complete", "[data-disable-with]", ->
      $(this).removeClass('disabled')

  @remoteContentAppend: (clickedLink, data) ->
    $($(clickedLink).data('remote-content-append')).after(data)

  @remoteContentFill: (clickedLink, data) ->
    $($(clickedLink).data('remote-content-fill')).html(data)

  @initAccordion: ->
    $(".js-account-accordion").accordion
      collapsible: true
      header: '.accordion-header'
      heightStyle: 'content'
      animate: <%= Rails.env.test? ? '0' : '250' %>
      active: false

  @refreshAccordion: (accordionId=null) ->
    $(".js-account-accordion").accordion("option", "active", false)
    $(".js-account-accordion").accordion('refresh')
    if accordionId?
      $(".js-account-accordion").accordion('option', 'active', accordionId)

  @initTabTogglers: ->
    $(document).on 'click', ".accounts-tab", (e) ->
      if $(".js-account-accordion").length > 0
        e.preventDefault()
        $(this).parents(".tabs").find(".tab-active").removeClass("tab-active")
        $(this).addClass("tab-active")

    $(document).on 'click', ".js-sidebar-tab", (e) ->
      e.preventDefault()
      $(this).parents(".tabs").find(".tab-active").removeClass("tab-active")
      $(this).addClass("tab-active")

budget.register Effects
