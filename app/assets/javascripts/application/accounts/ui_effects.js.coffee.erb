class Effects
  @className: 'Effects'

  # Rule of thumb:  fat arrow when using
  # the function as a callback or sending the function
  # itself as a parameter
  @events: =>
    @initAccordion()

  @globalEvents: =>
    @initRemoteHide()
    @initRemoteContentAppend()
    @initClickRemove()
    @initClickShow()

  @initClickRemove: ->
    $(document).on 'click', "[data-click-remove]", ->
      $($(this).data('click-remove')).remove()

  @initClickShow: ->
    $(document).on 'click', "[data-click-show]", ->
      $($(this).data('click-show')).show()

  @initRemoteHide: ->
    $(document).on 'ajax:complete', "[data-remote-hide]", ->
      $($(this).data('remote-hide')).hide()

  @initRemoteContentAppend: ->
    $(document).on(
      {
        'ajax:success': (e, data, status, xhr) ->
          Effects.remoteContentAppend(this, data)
        'ajax:error': (e, xhr, status, error) ->
          Effects.remoteContentAppend(this, xhr.responseText)
      }, "[data-remote-content-append]"
    )

  @remoteContentAppend: (clickedLink, data) ->
    $($(clickedLink).data('remote-content-append')).after(data)

  @initAccordion: ->
    $(".js-account-accordion").accordion
      collapsible: true
      header: '.accordion-header'
      heightStyle: 'content'
      animate: <%= Rails.env.test? ? '0' : '250' %>
      active: false

  @refreshAccordion: (accordionId=null) ->
    $(".js-account-accordion").accordion('refresh')
    if accordionId?
      $(".js-account-accordion").accordion('option', 'active', accordionId)

budget.register Effects
